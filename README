TELNET-SITE
===========


DESCRIPTION
-----------

  telnet-site - a glorified text file reader intented to be used as a telnet site.

  The telnet-site executable takes one argument, which is the path to the directory
that is the root of the site and contains text files to be displayed.

  The text files can be marked up with a minimal, non-intrusive syntax that will
allow telnet-site to do things such as flowing paragraphs and indenting list items.
The syntax is described in the FORMATTING section.

  Furthermore, the text files can specify animations, as described in the
ANIMATIONS section.

  Both the text window as well as the file index window are scrollable.


BUILDING
--------

  If you have autotools, you can just run
    ./autogen.sh
and then do the normal `./configure && make && make install` with your favourite
flags.

  Otherwise, you can run
    gcc -o telnetsite -lncurses ./src/*.c


SERVING OVER TELNET
-------------------

  Right now, in order to serve this over telnet, you need to use telnetd with
either inetd or xinetd.  Assuming you are running inetutils-telnetd and inetd,
your config should look like this:

  /etc/services, replacing <port> with the port you'd like to put the site on:

mytelnetsite <port>/tcp

  /etc/inetd.conf, replacing <user> with the user you'd like to run the site as
and <path-to-wrapper-script> with the path to the wrapper script (see below):

mytelnetsite stream tcp nowait <user> /usr/sbin/tcpd /usr/sbin/telnetd -h -E <path-to-wrapper-script>

  And finally, you should create a small script at <path-to-wrapper-script>,
with the following:

#!/bin/sh
exec <path-to-binary> <path-to-site.d>

  where <path-to-binary> is the path to the telnet-site executable, and
<path-to-site.d> is the path to the root directory of the site.


FORMATTING
----------

  - If a line in the file ends in a space character (ascii 0x20 that is), then the
newline at the end is "escaped" and the next line from the file is treated as a part
of the same paragraph and will be reflowed based on the screen width, for example:

  Hello 
world!

  Will be treated as a single line due to Hello having a trailing space.  (I guess
you might need a hex editor to see this one :^))

  - If the first non-whitespace character at the beginning of a line is not a
letter, then this line is treated as a list item and, if it needs re-flowing,
will be aligned to the first letter character on this line, for example:

  [] this is list item number one

  Given limited columns, can be re-flowed by the algorithm as:

  [] this is
     list
     item
     number
     one


ANIMATIONS
----------

  Animation specification must start with a ;anim on the line by
itself and end with either ;loop or ;noloop on the line by itself.
In between those two lines, it is expected that the user will specify
frames by using the keyword ;frame followed by the number of ticks this
frame should last (where one tick is 1/10th a second), all on one line
with nothing else on it.  On the next line, and until the next ;frame,
the lines will be treated as frame data.  The number of lines must be
the same among all frames.

  For example, here's a specification of a loading spinner:

;anim
;frame 1
loading... |
;frame 1
loading... /
;frame 1
loading... -
;frame 1
loading... \
;loop

BUGS
----

  You know it.
